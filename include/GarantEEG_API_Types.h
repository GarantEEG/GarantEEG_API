/**
@file GarantEEG_API_Types.h

@brief Типы устройства ЕЕГ

@author Мустакимов Т.Р.
**/
//----------------------------------------------------------------------------------
#ifndef GARANT_EEG_API_TYPES_H
#define GARANT_EEG_API_TYPES_H
//----------------------------------------------------------------------------------
namespace GarantEEG
{
//----------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////
//! Основные перечисления
////////////////////////////////////////////////////////////////////////////////////
//! Перечисление доступных устройств для работы
enum GARANT_EEG_DEVICE_TYPE
{
	//! Базовый класс для работы с устройством GarantEEG
	DT_GARANT = 0
};
//----------------------------------------------------------------------------------
//! Основные типы фильтров
enum GARANT_EEG_FILTER_TYPE
{
	//! Неизвестный фильтр, не валидно
    FT_UNKNOWN = 0,
	//! Частотный фильтр Butterworth
    FT_BUTTERWORTH
};
//----------------------------------------------------------------------------------
//! Состояния подключения к устройству
enum GARANT_EEG_DEVICE_CONNECTION_STATE
{
	//! Нет ошибок, подключены
    DCS_NO_ERROR = 0,
	//! Ошибка создания сокета
    DCS_CREATE_SOCKET_ERROR,
	//! Указанный хост не найден
    DCS_HOST_NOT_FOUND,
	//! Указанный хост недоступен
    DCS_HOST_NOT_REACHED,
	//! Ошибка во время получения данных
    DCS_RECEIVE_ERROR,
	//! Подключение разорвано
    DCS_CONNECTION_CLOSED = 10000,
	//! Стрим данных приостановлен
    DCS_TRANSLATION_PAUSED,
	//! Стрим данных возобновлен
    DCS_TRANSLATION_RESUMED
};
//----------------------------------------------------------------------------------
//! Состояния записи данных в файл
enum GARANT_EEG_DEVICE_RECORDING_STATE
{
	//! Нет ошибок, запись началась
    DRS_NO_ERROR = 0,
	//! Ошибка создания файла
    DRS_CREATE_FILE_ERROR,
	//! Не получен заголовок BDF файла с устройства
    DRS_HEADER_NOT_FOUND,
	//! Запись данных в файл приостановлена
    DRS_RECORD_PAUSED = 10000,
	//! Запись данных в файл возобновлена
    DRS_RECORD_RESUMED,
	//! Запись данных в файл остановлена
    DRS_RECORD_STOPPED
};
//----------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////
//! Основные структуры
////////////////////////////////////////////////////////////////////////////////////
//! Структура с данными по каналам
struct GARANT_EEG_CHANNELS_DATA
{
	//! Значения для 8 каналов
    double Value[8];
};
//----------------------------------------------------------------------------------
//! Структура с данными по сопротивлению
struct GARANT_EEG_RESISTANCE_DATA
{
	//! Значения для 8 каналов
    double Value[8];

	//! Значение референта
    double Ref;

	//! Значение земли
    double Ground;
};
//----------------------------------------------------------------------------------
//! Структура с данными по акселерометру
struct GARANT_EEG_ACCELEROMETR_DATA
{
	//! Значение по оси X
    double X;

	//! Значение по оси Y
    double Y;

	//! Значение по оси Z
    double Z;
};
//----------------------------------------------------------------------------------
//! Структура с данными фрэйма GarantEEG
struct GARANT_EEG_DATA
{
	//! Метка времени текущего пакета
    double Time;

	//! Количество наборов данных по каналам
    int DataRecordsCount;

	//! Сырые данные по каналам (реальное количество - DataRecordsCount)
    GARANT_EEG_CHANNELS_DATA RawChannelsData[100];

	//! Отфильтрованные с помощью установленных частотных фильтров данные по каналам (реальное количество - DataRecordsCount)
    GARANT_EEG_CHANNELS_DATA FilteredChannelsData[100];

	//! Данные по сопротивлению
    GARANT_EEG_RESISTANCE_DATA ResistanceData;

	//! Данные акселерометра
    GARANT_EEG_ACCELEROMETR_DATA AccelerometrData[5];

	//! Аннотации к текущему фрэйму
    char Annitations[30];
};
//----------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////
//! Объявление типов коллбэков
////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief EEG_ON_START_STATE_CHANGED Изменение состояния подключения
 * @param userData данные пользователя
 * @param state состояние из перечисления GARANT_EEG_DEVICE_CONNECTION_STATE
 */
typedef void __cdecl EEG_ON_START_STATE_CHANGED(void* /*userData*/, unsigned int /*state*/);
//----------------------------------------------------------------------------------
/**
 * @brief EEG_ON_RECORDING_STATE_CHANGED Изменение состояния записи данных в файл
 * @param userData данные пользователя
 * @param state состояние из перечисления GARANT_EEG_DEVICE_RECORDING_STATE
 */
typedef void __cdecl EEG_ON_RECORDING_STATE_CHANGED(void* /*userData*/, unsigned int /*state*/);
//----------------------------------------------------------------------------------
/**
 * @brief EEG_ON_RECEIVED_DATA Приход новой порции данных с устройства
 * @param userData данные пользователя
 * @param eegData Указатель на фрэйм данных ЭЭГ
 */
typedef void __cdecl EEG_ON_RECEIVED_DATA(void* /*userData*/, const GARANT_EEG_DATA* /*eegData*/);
//----------------------------------------------------------------------------------
} //namespace GarantEEG
//----------------------------------------------------------------------------------
#endif // GARANT_EEG_API_TYPES_H
//----------------------------------------------------------------------------------
